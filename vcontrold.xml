<?xml version="1.0"?>
<V-Control xmlns:vcontrol="http://www.openv.de/vcontrol">
  <unix>
     <config>
        <serial>
                <tty>127.0.0.1:12345</tty>
<!--            <tty>/dev/ttyUSB0</tty>-->
        </serial>
        <net>
                <port>3002</port>
                <allow ip='127.0.0.1'/>
                <allow ip='192.168.128.0/32'/>
        </net>
        <logging>
                <file>/var/log/vcontrold.log</file>
                <syslog>n</syslog>
<!--            <debug>y</debug>-->
                <debug>n</debug>
        </logging>
        <device ID="204D"/>
     </config>
  </unix>
  <units>
<!-- CUSTOM -->
    <unit name='Plain'>
      <abbrev>PL</abbrev>
      <calc get='V' set='V'/>
      <type>short</type>
    </unit>

    <unit name='weekday'>
      <abbrev>WD</abbrev>
      <icalc get="B4"/>
      <type>char</type>
      <entity>Day of the week</entity>
    </unit>
    <unit name='FuncEnergyEWW'>
      <abbrev>FEEWW</abbrev>
      <calc get="((BB*2*2*2*2*2*2*2*2) + BA) / 10"/><!-- 2^8 is a bit shift of 8 -->
      <!--
        P4 = workday
        P5 = hour
        The values are "0" between 0am-1am and we need to take the value from the previous day for continous reporting.

        x | (~x + 1) will cause a bit flip in the most significant bit IF the value is greater than 0.
        We need to shift this specific bit to the last significant bit, negate it to have a 1 byte result and AND it to receive a "1" between 0am-1am and "0" for the rest of the time.
        If we are at week day "0" we can not do this and can continue to use "0" as value.
      -->
      <icalc set="P4 - (((~((P5 | ((~P5) + 1)) >> 31)) &amp; 1) &amp; (((P4 | ((~P4) + 1)) >> 31) &amp; 1))"/>
      <type>short</type>
      <entity>kWh</entity>
    </unit>
    <unit name='FuncEnergyEHeat'>
      <abbrev>FEEH</abbrev>
      <calc get="((B7*2*2*2*2*2*2*2*2) + B6) / 10"/>
      <icalc set="P4 - (((~((P5 | ((~P5) + 1)) >> 31)) &amp; 1) &amp; (((P4 | ((~P4) + 1)) >> 31) &amp; 1))"/>
      <type>short</type>
      <entity>kWh</entity>
    </unit>
    <unit name='FuncEnergyWWW'>
      <abbrev>FEWWW</abbrev>
      <calc get="((B9*2*2*2*2*2*2*2*2) + B8) / 10"/>
      <icalc set="P4 - (((~((P5 | ((~P5) + 1)) >> 31)) &amp; 1) &amp; (((P4 | ((~P4) + 1)) >> 31) &amp; 1))"/>
      <type>short</type>
      <entity>kWh</entity>
    </unit>
    <unit name='FuncEnergyWHeat'>
      <abbrev>FEWH</abbrev>
      <calc get="((B5*2*2*2*2*2*2*2*2) + B4) / 10"/>
      <icalc set="P4 - (((~((P5 | ((~P5) + 1)) >> 31)) &amp; 1) &amp; (((P4 | ((~P4) + 1)) >> 31) &amp; 1))"/>
      <type>short</type>
      <entity>kWh</entity>
    </unit>

    <unit name='Bar'>
       <abbrev>BD</abbrev>
       <calc get='V/10' set='V*10'/>
       <type>short</type>
       <entity>Bar Druck</entity>
    </unit>

<!-- END CUSTOM -->
        <unit name='Temperatur'>
           <abbrev>UT</abbrev>
           <calc get='V/10' set='V*10'/>
           <type>short</type>
           <entity>Degrees Celsius</entity>
        </unit>
        <unit name='Neigung'>
           <abbrev>UN</abbrev>
           <calc get='V/10' set='V*10'/>
           <type>short</type>
           <entity></entity>
        </unit>
        <unit name='Temperatur 1Byte'>
          <abbrev>UT1</abbrev>
          <calc get='V/2' set='V*2'/>
          <type>char</type>
          <entity>Degrees Celsius</entity>
        </unit>
        <unit name='Temperatur 1Byte unsigned'>
          <abbrev>UT1U</abbrev>
          <calc get='V/2' set='V*2'/>
          <type>uchar</type>
          <entity>Degrees Celsius</entity>
        </unit>
        <unit name='Temperatur 1Byte ganzzahlig'>
          <abbrev>UTI</abbrev>
          <calc get='V' set='V'/>
          <type>uchar</type>
          <entity>Degrees Celsius</entity>
        </unit>
        <unit name='Status'>
           <abbrev>ST</abbrev>
           <calc get='V' set='V'/>
           <type>char</type>
           <entity></entity>
        </unit>
        <unit name='Counter'>
           <abbrev>CO</abbrev>
           <calc get='V' set='V'/>
           <type>int</type>
           <entity></entity>
        </unit>
        <unit name='Prozent'>
           <abbrev>PR</abbrev>
           <calc get='V/2' set='V*2'/>
           <type>short</type>
           <entity>%</entity>
        </unit>
        <unit name='Prozent 1 Byte ganzzahlig'>
           <abbrev>PR1</abbrev>
           <calc get='V' set='V'/>
           <type>uchar</type>
           <entity>%</entity>
        </unit>
        <unit name='CounterS'>
           <abbrev>CS</abbrev>
           <calc get='V/3600' set='V*3600'/>
           <type>uint</type>
           <entity>Stunden</entity>
        </unit>
        <unit name='CycleTime'>
           <abbrev>CT</abbrev>
           <type>cycletime</type>
        </unit>
        <unit name='ReturnStatus'>
           <abbrev>RT</abbrev>
           <type>enum</type>
           <enum bytes='00' text='0'/>
           <enum bytes='01' text='1'/>
           <enum text='NOT OK'/>
        </unit>
        <unit name='BetriebsArt'>
           <abbrev>BA</abbrev>
           <type>enum</type>
           <enum bytes='00' text='Abschaltbetrieb'/>
           <enum bytes='01' text='Warmwasser'/>
           <enum bytes='02' text='Heizen und Warmwasser'/>
           <enum bytes='03' text='3'/>
           <enum bytes='04' text='dauernd reduziert'/>
           <enum bytes='05' text='dauernd normal'/>
           <enum bytes='06' text='normal Abschalt'/>
           <enum bytes='07' text='nur Kuehlen'/>

           <enum text='UNKNOWN'/>
        </unit>    
         <unit name='SetReturnStatus'>
           <abbrev>SR</abbrev>
           <type>enum</type>
           <enum bytes='00' text='OK'/>
           <enum bytes='05' text='SYNC (NOT OK)'/>
           <enum text='NOT OK'/>
        </unit>
        <unit name='SystemTime'>
           <abbrev>TI</abbrev>
           <type>systime</type>
        </unit>
        <unit name='ErrorState'>
           <abbrev>ES</abbrev>
           <type>errstate</type>
           <enum bytes='00' text='Control mode (no error)'/>
           <enum bytes='0F' text='Maintenance (reset coding for 24 to 0)'/>
           <enum bytes='10' text='Outside temperature sensor short circuit'/>
           <enum bytes='18' text='Lead break outside temperature sensor'/>
           <enum bytes='20' text='Short-circuit flow temperature sensor'/>
           <enum bytes='21' text='Short-circuit temperature sensor rewind'/>
           <enum bytes='28' text='Interruption outside temperature sensor'/>
           <enum bytes='29' text='Interruption rewind temperature sensor'/>
           <enum bytes='30' text='Burner blocked check boiler water temp sensor'/>
           <enum bytes='38' text='Burner blocked lead break temperature sensor'/>
           <enum bytes='40' text='Short-circuit flow temperature sensor M2'/>
           <enum bytes='42' text='Interruption flow temperature sensor M2'/>
           <enum bytes='50' text='No DHW heating, check cylinder temperature sensor'/>
           <enum bytes='51' text='No DHW heating, short circuit outlet temperature sensor'/>
           <enum bytes='52' text='Burner blocked, short circuit flow sensor'/>
           <enum bytes='58' text='No DHW heating, lead break outlet temperature sensor'/>
           <enum bytes='92' text='Solar: Kurzschluss Kollektortemperatursensor'/>
           <enum bytes='93' text='Solar: Kurzschluss Sensor S3'/>
           <enum bytes='94' text='Solar: Kurzschluss Speichertemperatursensor'/>
           <enum bytes='9A' text='Solar: Unterbrechung Kollektortemperatursensor'/>
           <enum bytes='9B' text='Solar: Unterbrechung Sensor S3'/>
           <enum bytes='9C' text='Solar: Unterbrechung Speichertemperatursensor'/>
           <enum bytes='9F' text='Solar: Fehlermeldung Solarteil (siehe Solarregler)'/>
           <enum bytes='A7' text='Control unit faulty'/>
           <enum bytes='B0' text='Burner blocked, Short exhaust temperature sensor'/>
           <enum bytes='B1' text='Communication error Control Unit'/>
           <enum bytes='B4' text='Internal error (Electronics)'/>
           <enum bytes='B5' text='Internal error (Electronics)'/>
           <enum bytes='B6' text='Invalid hardware ID (Electronics)'/>
           <enum bytes='B7' text='Internal error (boiler encodable connector)'/>
           <enum bytes='B8' text='Burner blocked, lead break exhaust temperature sensor'/>
           <enum bytes='B9' text='Repeat internal error (data input)'/>
           <enum bytes='BA' text='Communication error extension kit for mixer circuit M2'/>
           <enum bytes='BC' text='Remote communication error Vitorol, heating M1'/>
           <enum bytes='BD' text='Remote communication error Vitorol, heating M2'/>
           <enum bytes='BE' text='Incorrect coding remote control Vitorol'/>
           <enum bytes='C1' text='External safety device (boiler cools off)'/>
           <enum bytes='C2' text='Kommunikationsfehler Solarregelung'/>
           <enum bytes='C5' text='Communication error variable speed heating circuit pump, heating circuit M1'/>
           <enum bytes='C6' text='Communication error variable speed heating circuit pump, heating circuit M2'/>
           <enum bytes='C7' text='Incorrect coding of the heating circuit pump'/>
           <enum bytes='C9' text='Fault message on the control module V active'/>
           <enum bytes='CD' text='communication error Vitocom 100 (KM-BUS)'/>
           <enum bytes='CE' text='communication error Schaltmodul-V'/>
           <enum bytes='CF' text='communication error LON Modul'/>
           <enum bytes='D1' text='Burner Fault'/>
           <enum bytes='D4' text='Safety breaker tripped or fault message is not inserted properly'/>
           <enum bytes='DA' text='Short circuit temperature sensor, heating circuit M1'/>
           <enum bytes='DB' text='Short circuit temperature sensor, heating circuit M2'/>
           <enum bytes='DD' text='Interruption temperature sensor, heating circuit M1'/>
           <enum bytes='DE' text='Interruption temperature sensor, heating circuit M2'/>
           <enum bytes='E3' text='Burner in fault state, fault in safety chain'/>
           <enum bytes='E4' text='Error supply voltage'/>
           <enum bytes='E5' text='Internal error (check ionization electrode)'/>
           <enum bytes='E6' text='Exhaust / supply air clogged'/>
           <enum bytes='F0' text='(Exchange control) internal error'/>
           <enum bytes='F1' text='Max exhaust gas temperature exceeded'/>
           <enum bytes='F2' text='Triggered temperature limiter'/>
           <enum bytes='F3' text='Burner fault, flame signal present at burner start'/>
           <enum bytes='F4' text='No Flame signal'/>
           <enum bytes='F7' text='Differenzdrucksensor defekt'/>
           <enum bytes='F8' text='Fuel valve closes too late'/>
           <enum bytes='F9' text='Fan speed too low during burner start'/>
           <enum bytes='FA' text='Fan not at stand-still'/>
           <enum bytes='FC' text='Electric Fan control unit faulty'/>
           <enum bytes='FD' text='Burner blocked, burner control unit faulty'/>
           <enum bytes='FE' text='Starkes Stoerfeld (EMV) in der Naehe oder Elektronik defekt'/>
           <enum bytes='FF' text='Strong interference (EMC) field exists'/>
           <enum text='UNKNOWN'/>
        </unit>
        <unit name='DeviceType'>
           <abbrev>DT</abbrev>
           <type>enum</type>
           <enum bytes='20 53 01 2B' text='V200WB2 ID=2053 Protokoll:GWG_VBEM'/>
                 <enum bytes='20 98' text='V200KW2 ID=2098 Protokoll:KW'/>
                 <enum bytes='20 C2' text='VDensHO1 ID=20C2 Protokoll:KW,P300'/>
                 <enum bytes='20 4D' text='V200-S ID=204D Protokoll:KW,P300'/>
           <enum text='UNKNOWN'/>
        </unit>
        <unit name='Brenner Stunden'>
           <abbrev>BH</abbrev>
           <type>uchar</type>
           <calc get='(B1 * 100)+B0'/>
           <entity>h</entity>
        </unit>
        <unit name='ErrorStateGWG'>
           <abbrev>ESG</abbrev>
           <type>enum</type>
           <enum bytes='00' text='Keine Stoerung'/>
           <enum bytes='02' text='Fehler Sicherheitskette'/>
           <enum bytes='04' text='Brennerstoerung 04'/>
           <enum bytes='05' text='Brennerstoerung 05'/>
           <enum bytes='07' text='Brennerstoerung 07'/>
           <enum bytes='08' text='Brennerstoerung 09'/>
           <enum bytes='08' text='Brennerstoerung 09'/>
           <enum bytes='0A' text='Brennerstoerung 10'/>
           <enum  text='UNKNOWN'/>
        </unit>
        <unit name='Bitstatus'>
           <abbrev>BST</abbrev>
           <type>uchar</type>
           <icalc get="(B0 &amp; (0x01&lt;&lt;BP))&gt;&gt; BP"/>
           <enum bytes='00' text='0'/>
           <enum bytes='01' text='1'/>
           <enum text='UNKNOWN'/>
        </unit>
        <unit name='HKP Pumpentyp'>
           <abbrev>HKT</abbrev>
           <type>uchar</type>
           <icalc get="(B0 &amp; (0x01&lt;&lt;BP))&gt;&gt; BP"/>
           <enum bytes='00' text='stufig'/>
           <enum bytes='01' text='drehzahlgeregelt'/>
           <enum text='UNKNOWN'/>
        </unit>
  </units>
  <protocols>
      <protocol name='P300'>
          <pid>41</pid>
          <macros>
                <macro name='GETADDR'>
                    <command>SEND 00 01</command>
                </macro>
                <macro name='SETADDR'>
<!-- CUSTOM -->
                    <command>SEND 00 02</command>
<!-- END CUSTOM -->
                </macro>
          </macros>
          <commands>
                <command name="getaddr">
                     <send>GETADDR $addr $hexlen;RECV $len $unit</send>
                </command>
<!-- CUSTOM -->
                <command name="getaddrnounit">
                     <send>GETADDR $addr $hexlen;RECV $len</send>
                </command>
<!-- END CUSTOM -->
                <command name="setaddr">
                     <send>SETADDR $addr $hexlen;SEND BYTES $unit;RECV 1 SR</send>
                </command>
                <command name="gettestaddr">
                     <send></send>
                </command>

<!-- CUSTOM -->
        <command name="setfunc">
          <send>SEND 00 07 $addr 02 02;SEND BYTES $unit;RECV $len $unit</send>
        </command>
<!-- END CUSTOM -->        
          </commands>
      </protocol>
      <protocol name='KW2'>
          <macros>
                <macro name='SYNC'>
                    <command>SEND 04;WAIT 05</command>
                </macro>
                <macro name='GETADDR'>
                    <command>SEND 01 F7</command>
                </macro>
                <macro name='SETADDR'>
                    <command>SEND 01 F4</command>
                </macro>
          </macros>
          <commands>
                <command name="getaddr">
                     <send>SYNC;GETADDR $addr $hexlen;RECV $len $unit</send>
                </command>
                <command name="setaddr">
                     <send>SYNC;SETADDR $addr $hexlen;SEND BYTES $unit;RECV 1 SR</send>
                </command>
          </commands>
      </protocol>
      <protocol name='GWG'>
          <macros>
                <macro name='SYNC'>
                    <command>SEND 04;WAIT 05</command>
                </macro>
                <macro name='GETADDR'>
                    <command>SEND 01 CB</command>
                </macro>
                <macro name='GETBADDR'>
                    <command>SEND 01 9E</command>
                </macro>
                <macro name='GETVADDR'>
                    <command>SEND 01 C7</command>
                </macro>
                <macro name='GETPADDR'>
                    <command>SEND 01 6E</command>
                </macro>
                <macro name='GETEADDR'>
                    <command>SEND 01 AE</command>
                </macro>
                <macro name='GETXADDR'>
                    <command>SEND 01 C5</command>
                </macro>
                <macro name='GETKMADDR'>
                    <command>SEND 01 43</command>
                </macro>
          </macros>
          <commands>
                <command name="getaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETADDR $addr $hexlen 04;RECV $len $unit</send>
                </command>
                <command name="gettestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
                <command name="getbaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETBADDR $addr $hexlen 04;RECV $len $unit</send>
                </command>
                <command name="getbtestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETBADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
               <command name="getpaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETPADDR $addr $hexlen 04;RECV $len $unit</send>
                </command>
                <command name="getptestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETPADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
                 <command name="getvaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETVADDR $addr $hexlen 04;RECV $len $unit</send>
                </command>
                <command name="getvtestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETVADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
                 <command name="geteaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETEADDR $addr $hexlen 04;RECV $len $unit</send>
                </command>
                <command name="getetestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETEADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
                 <command name="getxaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETXADDR $addr $hexlen 04;RECV $len $unit</send>
                </command>
                <command name="getxtestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETXADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
                 <command name="getkmaddr">
                     <send>SYNC;GETKMDDR $addr $hexlen 04;RECV $len $unit</send>
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                </command>
                <command name="getkmtestaddr">
                     <retry>3</retry>
                     <recvTimeout>150</recvTimeout>
                     <send>SYNC;GETKMADDR;SEND BYTES;SEND 01 04;RECV 1</send>
                </command>
                <command name="init">
                     <send>SEND 16 00 00;PAUSE 100;SEND 16 00 00;PAUSE 100;SEND 16 00 00;PAUSE 100;SEND 16 00 00;PAUSE 100</send>
                </command>
                <command name="setaddr">
                     <send>SYNC;RECV 1</send>
                </command>
          </commands>
      </protocol>
  </protocols>
  <extern xmlns:xi="http://www.w3.org/2003/XInclude">
     <xi:include href="vito.xml" parse="xml"/>
  </extern>
</V-Control>
